const TokenType=Object.freeze({IDENTIFIER:"IDENTIFIER",KEYWORD:"KEYWORD",NUMBER:"NUMBER",STRING:"STRING",SPACE:"SPACE",NEWLINE:"NEWLINE",TAB:"TAB",IMPORTNAME:"IMPORTNAME",HEADDATATYPE:"HEADDATATYPE",CONSTANT:"CONSTANT",OTHERPUNCTUATION:"OTHERPUNCTUATION",JAVADOC:"JAVADOC",ANNOTATION:"ANNOTATION"});class Parser{constructor(s){this.tokens=s,this.outCodeHTML="",this.outPlain=""}parse(){for(let s=0;s<this.tokens.length;s++)switch(String(this.tokens[s].type)){case"KEYWORD":case"IDENTIFIER":case"NUMBER":case"STRING":case"IMPORTNAME":case"HEADDATATYPE":case"OTHERPUNCTUATION":case"JAVADOC":case"ANNOTATION":case"CONSTANT":this.outCodeHTML+='<span class="'+String(this.tokens[s].type).toLowerCase()+'">'+this.cleanse(this.tokens[s].text)+"</span>",this.outPlain+=this.tokens[s].text;break;case"NEWLINE":this.outCodeHTML+='<span class="'+String(this.tokens[s].type).toLowerCase()+'"><br /></span>',this.outPlain+="\n";break;case"TAB":this.outCodeHTML+='<span class="'+String(this.tokens[s].type).toLowerCase()+'">    </span>',this.outPlain+="\t";break;case"SPACE":this.outCodeHTML+='<span class="'+String(this.tokens[s].type).toLowerCase()+'"> </span>',this.outPlain+=" ";break;default:console.log("Unknown token: "+String(this.tokens[s].type))}return this.outCodeHTML}cleanse(s){return s.replaceAll("&","&amp;").replaceAll(" ","&nbsp;").replaceAll("{","&lbrace;").replaceAll("<","&lt;").replaceAll(">","&gt;")}}class Token{constructor(s,t,e,i){this.text=s,this.line=t,this.col=e,this.type=i}}class Tokenizer{constructor(){this.line=1,this.col=0,this.start=0,this.current=0,this.tokens=[],this.sourceCode="",this.keywords=[],this.keywords.push("abstract"),this.keywords.push("assert"),this.keywords.push("boolean"),this.keywords.push("break"),this.keywords.push("byte"),this.keywords.push("case"),this.keywords.push("catch"),this.keywords.push("char"),this.keywords.push("class"),this.keywords.push("continue"),this.keywords.push("const"),this.keywords.push("default"),this.keywords.push("do"),this.keywords.push("double"),this.keywords.push("else"),this.keywords.push("enum"),this.keywords.push("exports"),this.keywords.push("extends"),this.keywords.push("final"),this.keywords.push("finally"),this.keywords.push("float"),this.keywords.push("for"),this.keywords.push("goto"),this.keywords.push("if"),this.keywords.push("implements"),this.keywords.push("import"),this.keywords.push("instanceof"),this.keywords.push("int"),this.keywords.push("interface"),this.keywords.push("long"),this.keywords.push("module"),this.keywords.push("native"),this.keywords.push("new"),this.keywords.push("non-sealed"),this.keywords.push("package"),this.keywords.push("private"),this.keywords.push("protected"),this.keywords.push("public"),this.keywords.push("requires"),this.keywords.push("return"),this.keywords.push("short"),this.keywords.push("static"),this.keywords.push("strictfp"),this.keywords.push("super"),this.keywords.push("switch"),this.keywords.push("synchronized"),this.keywords.push("this"),this.keywords.push("throw"),this.keywords.push("throws"),this.keywords.push("transient"),this.keywords.push("try"),this.keywords.push("var"),this.keywords.push("void"),this.keywords.push("volatile"),this.keywords.push("while"),this.keywords.push("yield"),this.keywords.push("sealed"),this.keywords.push("record"),this.keywords.push("permits"),this.keywords.push("true"),this.keywords.push("false"),this.keywords.push("null"),this.keywords.push("System")}peek(){return this.sourceCode.charAt(this.current+1)}isAlphabet(s){return null!=String(s).match(new RegExp("[a-zA-Z_$]"))}isIdentifierEnding(s){return null!=String(s).match(new RegExp("[a-zA-Z_$0-9]"))}isAtEnd(){return this.current>=this.sourceCode.length}annotation(){for(;!this.isAtEnd()&&" "!=this.peek();){if("\n"==this.peek()){this.line++;break}this.col++,this.current++}}multilineString(){for(;!this.isAtEnd();){if('"'==this.sourceCode.charAt(this.current)&&'"'==this.peek()&&'"'==this.peekNext()){if(this.current-1>=0&&"\\"!=this.sourceCode.charAt(this.current-1)||0==this.current)break}else"\n"==this.peek()&&this.line++;this.col++,this.current++}this.col++,this.current++}multilineComment(){for(;!this.isAtEnd()&&("*"!=this.peek()||"/"!=this.peekNext());)"\n"==this.peek()&&this.line++,this.col++,this.current++;this.col++,this.current++}peekNext(){return this.sourceCode.charAt(this.current+2)}isUppercase(s){return null!=s.match(new RegExp("^[A-Z_$][A-Z_$0-9]*$"))}comment(){for(;!this.isAtEnd()&&"\n"!=this.peek();)this.col++,this.current++}character(){for(;!this.isAtEnd()&&("'"!=this.peek()||"\\"==this.sourceCode.charAt(this.current)&&"\\"!=this.sourceCode.charAt(this.current-1));)this.col++,this.current++}string(){for(;!this.isAtEnd()&&('"'!=this.peek()||"\\"==this.sourceCode.charAt(this.current)&&"\\"!=this.sourceCode.charAt(this.current-1));)this.col++,this.current++}isNumerical(s){return null!=String(s).match(new RegExp("[0-9]"))}tokenize(s){for(this.sourceCode=s;!this.isAtEnd();){var t=this.sourceCode.charAt(this.current);if(this.isAlphabet(t)){for(;!this.isAtEnd()&&this.isIdentifierEnding(this.peek());)this.col++,this.current++;this.keywords.includes(s.substring(this.start,this.current+1))?this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.KEYWORD)):this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.IDENTIFIER)),this.col++,this.current++,this.start=this.current}else{if(this.isNumerical(t)){for(;!this.isAtEnd()&&(this.isNumerical(this.peek())||"."==this.peek());)this.col++,this.current++;this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.NUMBER))}else switch(t){case" ":this.tokens.push(new Token(" ",this.line,this.col,TokenType.SPACE));break;case"\n":this.tokens.push(new Token("\n",this.line,this.col,TokenType.NEWLINE)),this.line++,this.col=-1;break;case"\t":this.tokens.push(new Token("    ",this.line,this.col,TokenType.TAB));break;case"@":this.annotation(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.ANNOTATION));break;case'"':'"'==this.peek()&&'"'==this.peekNext()?(this.current+=2,this.multilineString()):this.string(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.STRING));break;case"'":this.character(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.STRING));break;case"/":"/"==this.peek()?(this.comment(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.STRING))):"*"==this.peek()?"*"!=this.peekNext()?(this.multilineComment(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.STRING))):(this.multilineComment(),this.current++,this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.JAVADOC))):this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.OTHERPUNCTUATION));break;case";":case"(":case")":case"{":case"}":case"<":case">":case"[":case"]":case",":case"*":case"=":case"+":case"-":case"%":case"!":case"~":case"&":case"|":case"?":case":":case"^":case".":this.tokens.push(new Token(s.substring(this.start,this.current+1),this.line,this.col,TokenType.OTHERPUNCTUATION));break;default:console.log("Could not interpret character: '"+t+"'. [ln: "+this.line+"]")}this.col++,this.current++,this.start=this.current}}for(var e=0;e<this.tokens.length;e++){if("import"===this.tokens[e].text||"package"===this.tokens[e].text)for(var i=e+1;";"!==this.tokens[i].text;){var h=this.tokens[i];this.tokens.splice(i,0,new Token(h.text,h.line,h.col,TokenType.IMPORTNAME)),this.tokens.splice(i+1,1),i++}else if((this.tokens[e].type==TokenType.IDENTIFIER||null!=this.tokens[e].text.match(/[})\]]/g))&&(this.current=e,!this.isAtEnd()&&this.tokens.length>e+1&&"."===this.tokens[e+1].text))for(i=e+1;this.tokens[i].type!=TokenType.OTHERPUNCTUATION||"."===this.tokens[i].text;)if("."!==this.tokens[i].text){h=this.tokens[i];this.tokens.splice(i,0,new Token(h.text,h.line,h.col,TokenType.HEADDATATYPE)),this.tokens.splice(i+1,1),i++}else i++;if(this.isUppercase(this.tokens[e].text)&&(this.tokens[e].type==TokenType.HEADDATATYPE||this.tokens[e].type==TokenType.IDENTIFIER)){h=this.tokens[e];this.tokens.splice(e,0,new Token(h.text,h.line,h.col,TokenType.CONSTANT)),this.tokens.splice(e+1,1)}}return this.tokens}}var css="\n    code span {\n      display: inline;\n      white-space: pre;\n    }\n\n    .keyword {\n      color: #003399;\n      font-weight: bold;\n    }\n\n    .identifer {\n      color: black;\n    }\n\n    .number {\n      color: #1740E6;\n    }\n\n    .string {\n      color: #106B10;\n    }\n\n    .space {\n      color: black;\n    }\n\n    .newline {\n      color: black;\n    }\n\n    .tab {\n      color: black;\n    }\n\n    .importname {\n      color: #006699;\n    }\n\n    .headdatatype {\n      color: #034524;\n    }\n\n    .otherpunctuation {\n      color: black;\n    }\n\n    .constant {\n      color: #660E7A;\n    }\n\n    .javadoc {\n      color: #bf8f1d;\n    }\n\n    .annotation {\n      color: #808000;\n    }\n",head=document.head||document.getElementsByTagName("head")[0],style=document.createElement("style");head.appendChild(style),style.type="text/css",style.styleSheet?style.styleSheet.cssText=css:style.appendChild(document.createTextNode(css));for(var code=document.getElementsByTagName("code"),i=0;i<code.length;i++){var tokensList=(new Tokenizer).tokenize(code[i].innerText),parser=new Parser(tokensList),output=parser.parse();code[i].innerHTML=output}